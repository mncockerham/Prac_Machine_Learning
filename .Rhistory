set.seed(4567)
n <-40000
lambda <- .2
mean_lambda <- 1/lambda
std_lambda <-  1/lambda
c <- rexp(n, lambda)
mean_lambda
mean(c)
std_lambda
sd(c)
matrix_lambda <- data.frame(rexp(n, lambda), nrow=1000,ncol=40,byrow=TRUE)
set.seed(4567)
n <-40000
lambda <- .2
mean_lambda <- 1/lambda
std_lambda <-  1/lambda
c <- rexp(n, lambda)
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
date_lambda <- data.frame(rexp(n, lambda), nrow=1000,ncol=40,byrow=TRUE)
mean(data_lambda[,1:1000])
set.seed(4567)
n <-40000
lambda <- .2
mean_lambda <- 1/lambda
std_lambda <-  1/lambda
c <- rexp(n, lambda)
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
data_lambda <- data.frame(rexp(n, lambda), nrow=1000,ncol=40,byrow=TRUE)
mean(data_lambda[,1:1000])
set.seed(4567)
n <-40000
lambda <- .2
mean_lambda <- 1/lambda
std_lambda <-  1/lambda
c <- rexp(n, lambda)
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
data_lambda <- data.frame(rexp(n, lambda), nrow=1000,ncol=40,byrow=TRUE)
mean(data_lambda[1:1000],])
set.seed(4567)
n <-40000
lambda <- .2
mean_lambda <- 1/lambda
std_lambda <-  1/lambda
c <- rexp(n, lambda)
cfunc <- function(x, n) 2 * sqrt(n) * (mean(x) - 0.5)
data_lambda <- data.frame(rexp(n, lambda), nrow=1000,ncol=40,byrow=TRUE)
mean(data_lambda[1:1000,])
data_lambda[1:1000,]
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot2(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g <- qplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
load(ggplot2)
a <- 5
> s <- 2
> n <- 20
> error <- qt(0.975,df=n-1)*s/sqrt(n)
> left <- a-error
> right <- a+error
qt(0.975,df=9-1)*s/sqrt(9)
s <- 30
n <- n
qt(0.975,df=n-1)*s/sqrt(n)
s <- 30
n <- 9
qt(0.975,df=n-1)*s/sqrt(n)
qt(0.95,df=n-1)*s/sqrt(n)
1100 + c(1,-1) * qt(.975,9-1)*30/sqrt(9)
1100 + c(1,-1) * qt(.95,9-1)*30/sqrt(9)
1100 + c(1,-1) * qt(.95,9)*30/sqrt(9)
1100 + c(1,-1) * qt(.95,9-1)*30/sqrt(9)
1100 + c(-1,1) * qt(.95,9-1)*30/sqrt(9)
1100 + c(-1,1) * qt(.975,9-1)*30/sqrt(9)
s <- (9,10,11,12,9,10,11,12,12)
t <- s - 2
t.test(difference)
t.test(rnorm2(9,1100,30))
rnorm2 <-  function(n,mean,sd) { mean+sd*scale(rnorm(n)) }
t.test(rnorm2(9,1100,30))
t.test(rnorm2(10,3,sqrt(0.6)),rnorm2(10,5,sqrt(0.68)), var.equal=TRUE)
-1.248351 * - 2
t.test(rnorm(100,6,2),rnorm(100,5,0.5), var.equal=FALSE)
test(rnorm2(9,-3,1.5),rnorm2(9,1,1.8), var.equal=TRUE, conf.level=.90)
t.test(rnorm2(9,-3,1.5),rnorm2(9,1,1.8), var.equal=TRUE, conf.level=.90)
x = 2.6
c(-1,1)*   qt(.975,9-1)*x/sqrt(9)
x = 2.1
c(-1,1)*   qt(.975,9-1)*x/sqrt(9)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata = as.data.frame(t(colMeans(olive)))
newdata
t <- train(area ~.,method = "rpart",data=olive)
library(caret)
modFit <- train(area ~.,method = "rpart",data=olive)
modFit <- train(Area ~.,method = "rpart",data=olive)
predict(modFit,data=newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
newdata <- as.data.frame(t(colMeans(olive)))
library(caret)
modFit <- train(Area ~ .,method = "rpart",data=olive)
predict(modFit,data=newdata)
newdata[,~Area]
newdata[, ]
newdata[,2:8 ]
data = newdata[,2:8 ]
modFit <- train(Area ~ .,method = "rpart",data=data)
library(caret)
modFit <- train(Area ~ .,method = "rpart",data=olive)
predict(modFit,data=newdata)
predict(modFit,data=data)
library(rattle)
fancyRpartPlog(modFit$finalModel)
fancyRpartPlot(modFit$finalModel)
data
newdata <- as.data.frame(t(colMeans(olive)))
newdata
olive
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
trainSA
trainSA = SAheart[train,c(10,9,8,7,6,3,2)]
testSA = SAheart[-train,c(10,9,8,7,6,3,2)]
trainSA
set.seed(13234)
modFit <- train(chd ~ .,method = "glm",familybinomial,data=trainSA)
set.seed(13234)
modFit <- train(chd ~ .,method = "glm",family="binomial",data=trainSA)
set.seed(13234)
modFit <- train(chd ~ .,method = "glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
prediction <- predict(modFit,data=testSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
set.seed(13234)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(randomForest)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
library(randomForest)
install.packages("randomForest")
library(randomForest)
modelfit <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
order(varImp(modelfit), decreasing = TRUE)
trainSA$chd <- as.factor(trainSA$chd )
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
trainSA$chd
as.factor(trainSA$chd )
trainSA$chd <- as.factor(trainSA$chd )
testSA$chd <- as.factor(testSA$chd )
testSA = SAheart[-train,]
testSA$chd <- as.factor(testSA$chd )
set.seed(13234)
modelfit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method = "glm", family = "binomial", data = trainSA)
trainingpredict <- predict(modelfit, trainSA)
testingpredict <- predict(modelfit, testSA)
missClass(trainSA$chd, trainingpredict)
modelfit(trainSA$chd, trainingpredict)
base <- read.csv("C:/Users/mark/Downloads/pml-training.csv", header = TRUE)
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
library(caret)
set.seed(3425)
inTrain <- createDataPartition(y=base$classe,p=.8,list=FALSE)
training <- base[inTrain,]
testing <- base[-inTrain,]
sapply(training, is.numeric)
columns <- sapply(training, is.numeric)
columns
columns$X <- FALSE
columns$raw_timestamp_part_1 <- FALSE
columns$raw_timestamp_part_2 <- FALSE
training[,columns]
training[,columns[,]]
training[,columns[]]
columns()
columns[[]]
columns[[1]]
columns[[1:160]
columns[1:160]
training[,columns[[c(1:160)]]
training[,columns[[c(1:160)]]]
training[,columns[[c(1:160)]]]
columns[[c(1:160)]]
columns[[c(1:11)]]
unlist(columns)
columns <- lapply(training, is.numeric)
lapply(training, is.numeric)
columns <- lapply(training, is.numeric)
columns
columns[[1]]
columns[[1:160]]
columns[[c(1,2)]]
columns[c(1,2)]
columns.values
?columns
?columns
describe(columns)
type(columns)
as.vector(columns)
training[,as.vector(columns)]
x <- columns()
x <- as.vector(columns)
is.numeric(training)
columns <-   is.numeric(training[,])
columns
columns <- sapply(training, is.numeric)
columns
columns[3]
columns[3].value
columns[c(1:160)]
c(do.call("cbind",columns))
columns <- lapply(training, is.numeric)
c(do.call("cbind",columns))
columns <- lapply(training, is.numeric)
columns$X <- FALSE
columns$raw_timestamp_part_1 <- FALSE
columns$raw_timestamp_part_2 <- FALSE
cl <- c(do.call("cbind",columns))
training[,cl]
cor_matrix <- cor( training[,cl],y=NULL,na.rm=FALSE)
cor_matrix <- cor( training[,cl],y=NULL)
corPlot(x, new = FALSE, col, minCor,
labels = FALSE, lab.both.axes = FALSE, labcols = "black",
title = "", cex.title = 1.2,
protocol = FALSE, cex.axis = 0.8,
cex.axis.bar = 1, signifBar = 2, ...)
install.packages("corrgram")
library(corrgram)
corrgram(cor_matrix, order=TRUE, lower.panel=panel.pie, text.panel=panel.txt,
main="Value Corrolation Matrx")
corrgram(cor_matrix, order=TRUE, lower.panel=panel.pie, text.panel=panel.txt,upper.panel=panel.pie,
main="Value Corrolation Matrx")
cor_matrix
columns
training[,cl
training[,cl]
data <- read.csv("C:/Users/mark/Downloads/pml-training.csv", header = TRUE)
data[,cl]
cor_matrix <- cor( data[,cl],y=NULL)
corrgram(cor_matrix, order=TRUE, lower.panel=panel.pie, text.panel=panel.txt,upper.panel=NULL,
main="Value Corrolation Matrx")
cor_matrix <- cor( data[,cl],y=NULL)
cor_matrix
-- removes non numeric Columns
columns <- lapply(training, is.numeric)
columns$X <- FALSE
columns$raw_timestamp_part_1 <- FALSE
columns$raw_timestamp_part_2 <- FALSE
cl <- c(do.call("cbind",columns))
data[,cl]
head(data[,cl])
columns
cl
data[,cl]
lapply(training, is.na)
columns <- lapply(training, is.na)
columns
columns <- lapply(training, is.na())
columns <- lapply(training, is.numeric)
columns
lapply(training,sum)
sapply(training,sum)
lapply(training, is.numeric)
c_training <- training
c_training[is.na(c_training)] <- 'A'
c_training
columns <- lapply(c_training, is.numeric)
columns$X <- FALSE
columns$raw_timestamp_part_1 <- FALSE
columns$raw_timestamp_part_2 <- FALSE
columns$num_window <- FALSE
cl <- c(do.call("cbind",columns))
cor_data <-head(data[,cl])
cor_data <-head(data[,cl])
columns
head(training[,cl])
cor_data <-(training[,cl])
cor_matrix <- cor( data[,cl],y=NULL)
corrgram(cor_matrix, order=TRUE, lower.panel=panel.pie, text.panel=panel.txt,upper.panel=NULL,
main="Value Corrolation Matrx")
cor_matrix
cor_matrix(,c(1,2)]
cor_matrix[,c(1,2)]
cor_matrix[,]
abs(cor_matrix[,])
abs(cor_matrix[,]) > .7
cor_matrix[abs(cor_matrix[,]) > .7]
abs(cor_matrix[,]) > .7
abs(cor_matrix[,]) > .8
abs(cor_matrix[,]) between .8 and .999
cor_matrix
abs(cor_matrix[1,]) > .7
(abs(cor_matrix[1,]) > .7)=TRUE
(abs(cor_matrix[1,]) > .7)==TRUE
abs(cor_matrix[1,]) > .7
v <-  (abs(cor_matrix[1,]) > .7)
v(TRUE)
v()
v[TRUE]
v[==TRUE]
v[c(v)]
v <-  (abs(cor_matrix[1,]) > .8)
v[c(v)]
v <-  (abs(cor_matrix[1,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[1,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[2,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[3,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[4,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[5,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[6,]) > .9)
v[c(v)]
v <-  (abs(cor_matrix[,]) > .9)
v
apply(
v, 1,
function(u) paste( names(which(u)), collapse="," )
)
apply(
v[,1], 1,
function(u) paste( names(which(u)), collapse="," )
)
v[,1]
v[1,1]
apply(
v, 1,
function(u) paste( names(which(u)), collapse="," )
)
v <-  (abs(cor_matrix[,]) > .8)
apply(
v, 1,
function(u) paste( names(which(u)), collapse="," )
)
set.seed(3425)
inTrain <- createDataPartition(y=base$classe,p=.8,list=FALSE)
training <- base[inTrain,c(cl,160)]
testing <- base[-inTrain,c(cl,160)]
moda <- train(classe ~ ., data = training,method="rf")
modTree <- moda
modTree
pred <- predict(modTree,testing);
testing$predRigh <- pred==testing$classe
table(pred,testing$classe)
predict(modTree,testing);
predict(modTree,test);
predict(modTree,test[ ,c(cl,160)]);
modTree,test[ ,c(cl,160)]
test[ ,c(cl,160)]
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
test
test[ ,c(cl,160)]
test[ ,c(cl,160)]
test
test[,1]
test[,cl]
test[ ,cl]
predict(modTree,test[ ,cl]);
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
test[,c(cl,160)]
homework <- test[,c(cl)]
homework
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
homework <- test[,c(cl,160)]
test
hEAD (TEST)
head(test)
read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
read.csv("C:/Users/mark/Downloads/pml-training.csv", header = TRUE)
read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
homework <- test[,c(cl,160)]
predict(modTree,test[ ,cl]);
pred <- predict(modTree,homework);
pred
homework
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
test
test[,c(cl,160)]
homework <- test[,cl]
cl
test
test[,cl]
test[,cl]
homework <- test[,c(cl,TRUE)]
homework
pred <- predict(modTree,homework);
testing
testing <- base[-inTrain,c(cl,160)]
pred <- predict(modTree,testing);
homework  <- test[,c(cl,160)]
homework
testing
training
data <- read.csv("C:/Users/mark/Downloads/pml-training.csv", header = TRUE)
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
training <- base[inTrain,c(cl,160)]
testing <- base[-inTrain,c(cl,160)]
testing
training
training <- base[inTrain,c(cl,TRUE)]
testing <- base[-inTrain,c(cl,TRUE)]
training
cl
columns$classe <- TRUE
col <- c(do.call("cbind",columns))
col
set.seed(3425)
inTrain <- createDataPartition(y=base$classe,p=.8,list=FALSE)
training <- base[inTrain,col]
testing <- base[-inTrain,col]
homework  <- test[,col]
homework
testing
modTree <- train(classe ~ ., data = training,method="rf")
modTree
pred <- predict(modTree,testing);
testing$predRigh <- pred==testing$classe
table(pred,testing$classe)
homework  <- test[,col]
pred <- predict(modTree,homework);
pred
predict(modTree,homework[1,]);
predict(modTree,homework[1,])
data <- read.csv("C:/Users/mark/Downloads/pml-training.csv", header = TRUE)
test <- read.csv("C:/Users/mark/Downloads/pml-testing.csv", header = TRUE)
getwd()
setwd("C:\Users\Mark\Documents\GitHub\Prac_Machine_Learning")
setwd("C:/Users/Mark/Documents/GitHub/Prac_Machine_Learning")
